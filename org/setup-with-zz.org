#+TITLE: Setup *macs with zach!
#+AUTHOR: Zach Mandeville

* Purpose
Track the setup of spacemacs with my own custom .spacemacs.d folder, to remember anything special I did when helping someone else.
* Steps
** Clone spacemacs to .emacs.d
  : git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
** Switch to develop branch of spacemacs
   #+begin_example shell
   cd ~/.emacs.d
   git checkout develop
   git pull
   #+end_example
** Clone humacs/spacemacs.d to my spacemacs.d
   : git clone git@github.com:humacs/.spacemacs.d.git ~/.spacemacs.d
** Start up emacs
   : emacs -nw
** Update Packages
   When started for the first time, spacemacs installs a bunch of packages from melpa. However, I had an issue where a bunch of packages couldn't be found and so org-mode was not working as expected.  I was able to fix this by updating the packages and then recompiling.

   To update:
   : spc feU

   To recompile:
   : spc fec
** Uncomment some sane defaults
   Since this is my own spacemacs.d now, I can make changes directly to the .init file (getting to it with ~spc fed~).  I uncommented my favorite among the suggested layers.

   Tested it all by opening my flow.org and adding it to agenda list.  agenda list is still working and the capture templaates are working.  Both were not working with kubemacs and so I am happy.
** Delete the cache and recompile
   I am having an issue where I cannot refile any headings in org-mode, nor can I archive them.  I get the error message
   ~invalid function: org-preserve-local-variables~

   This is a known issue with spacemacs /and/ emacs, based on how emacs packaging works.  You can keep up with the discussion on this [[https://github.com/syl20bnr/spacemacs/issues/11801][spacemacs ticket]]  , where they offer the workaround of deleting all the org .elc files in your cache and recompiling from elpa.

   I tried a number of their workarounds without success.  This definitely feels brittle, or near superstitious on how I got it to work, but this incantation and these steps helped me:

  First find and remove all .elc files from .emacs.d:
  #+begin_src shell :results silent
    cd ~/.emacs.d
    find . -name *.elc -print0 | xargs -0 rm
  #+end_src

  Then fully quit out of emacs with ~spc qq~ and restart it.
#+begin_example shell
emacs -nw # we don't want to connect to a server or open a file, we want a full restart
#+end_example

While on the spacemacs home screen, recompile elpa with ~spc spc spacemacs/recompile-elpa~

Quit out and start again.

Open an org file and try archiving a subtree(=,sA=) or refiling a subtree(=,sr=).  Both should now work.
** Add apisnoop/docs to org-agenda
 I didn't realize the extent of agenda's power for finding things, that you can search across your files for keywords, tags, hyeadings, etc.  We can use this to make a really nice knowledge base for our org files, but it requires having them in our agenda list.

 The agenda list lets you add a directory, which will put all files in its immediate path (no subdirectories) in the agenda list.  This is moving away from reprorducible, as it now expects us all to have an apisnoop dir in our home path.  At the same time, this makes sense for ii employees to have...

 Long-term, I can see us keeping org files in the spacemacs.d folder itself, at least those related to moving throlugh and using spacemacs.  These would get loaded by default, and then there'd be functions one could run to add apisnoop to the agenda if/when they clone it or something.  I'ma keep moving now to get folks feedback on this flow.  I think it'll make more sense to discuss when we can all see it.
** Add necessary layers from original ii layer to .spacemacs.d/init.el
   We have an ii layer that requires a bunch of other layers, from a time when we weren't able to do this overlay.  At the same time, there's some niced functions in ii around pairing.  I wanna extract these so the layer is more modular.  So i am goinug to move stuff like docker/elisp/ etc from the ii layer and see what's left.
  These layers are:
  #+begin_example elisp
 ;; List of layers we depend on
                                      auto-completion
                                      docker
                                      emacs-lisp
                                      git
                                      ;; github
                                      go
                                      graphviz
                                      html
                                      ;; ipython-notebook
                                      javascript
                                      org
                                      org-capture
                                      lsp
                                      python
                                      markdown
                                      sql
                                      version-control
                                      yaml
  #+end_example

  i am not sure we need all of them, I'll annotate my reasoniung to what I add

  #+begin_example elisp
 ;; List of layers we depend on
                                      auto-completion ;; already added
                                      docker ;; necessary
                                      emacs-lisp ; already added
                                      git ; already added
                                      ;; github nah
                                      go ;needed
                                      graphviz ; not sure if we use this or how we use this.  leaving out
                                      html ; needed
                                      ;; ipython-notebook
                                      javascript ;needed
                                      org ;already added
                                      org-capture ;already added
                                      lsp ; needed for go i believe
                                      python ; needed
                                      markdown ; needed
                                      sql ; needed
                                      version-control ; nah, feels overkill with already having git?
                                      yaml ; needed
  #+end_example
