#+TITLE: Setup *macs with zach!
#+AUTHOR: Zach Mandeville

* Purpose
Track the setup of spacemacs with my own custom .spacemacs.d folder, to remember anything special I did when helping someone else.
* Steps
** Clone develop branch of spacemacs to .emacs.d
   : git clone -b develop https://github.com/syl20bnr/spacemacs ~/.emacs.d
** Clone humacs/spacemacs.d to my spacemacs.d
   : git clone git@github.com:humacs/.spacemacs.d ~/.spacemacs.d
** Start up emacs
   : emacs -nw
** Update Packages
   When started for the first time, spacemacs installs a bunch of packages from melpa. However, I had an issue where a bunch of packages couldn't be found and so org-mode was not working as expected.  I was able to fix this by updating the packages and then recompiling.

   To update:
   : spc feU

   To recompile:
   : spc fec
** Uncomment some sane defaults
   Since this is my own spacemacs.d now, I can make changes directly to the .init file (getting to it with ~spc fed~).  I uncommented my favorite among the suggested layers.

   Tested it all by opening my flow.org and adding it to agenda list.  agenda list is still working and the capture templaates are working.  Both were not working with kubemacs and so I am happy.
** Delete the cache and recompile
   I am having an issue where I cannot refile any headings in org-mode, nor can I archive them.  I get the error message
   ~invalid function: org-preserve-local-variables~

   This is a known issue with spacemacs /and/ emacs, based on how emacs packaging works.  You can keep up with the discussion on this [[https://github.com/syl20bnr/spacemacs/issues/11801][spacemacs ticket]]  , where they offer the workaround of deleting all the org .elc files in your cache and recompiling from elpa.

   I tried a number of their workarounds without success.  This definitely feels brittle, or near superstitious on how I got it to work, but this incantation and these steps helped me:

  First find and remove all .elc files from .emacs.d:
  #+begin_src shell :results silent
    cd ~/.emacs.d
    find . -name *.elc -print0 | xargs -0 rm
  #+end_src

  Then fully quit out of emacs with ~spc qq~ and restart it.
#+begin_example shell
  emacs -nw # we don't want to connect to a server or open a file, we want a full restart
#+end_example

While on the spacemacs home screen, recompile elpa with ~spc spc spacemacs/recompile-elpa~

Quit out and start again.

Open an org file and try archiving a subtree(=,sA=) or refiling a subtree(=,sr=).  Both should now work.
** Add apisnoop/docs to org-agenda
 I didn't realize the extent of agenda's power for finding things, that you can search across your files for keywords, tags, hyeadings, etc.  We can use this to make a really nice knowledge base for our org files, but it requires having them in our agenda list.

 The agenda list lets you add a directory, which will put all files in its immediate path (no subdirectories) in the agenda list.  This is moving away from reproducible, as it now expects us all to have an apisnoop dir in our home path.  At the same time, this makes sense for ii employees to have...

 Long-term, I can see us keeping org files in the spacemacs.d folder itself, at least those related to moving through and using spacemacs.  These would get loaded by default, and then there'd be functions one could run to add apisnoop to the agenda if/when they clone it or something.  I'ma keep moving now to get folks feedback on this flow.  I think it'll make more sense to discuss when we can all see it.
** Add necessary layers from original ii layer to .spacemacs.d/init.el
   We have an ii layer that requires a bunch of other layers, from a time when we weren't able to do this overlay.  At the same time, there's some niced functions in ii around pairing.  I wanna extract these so the layer is more modular.  So i am going to move stuff like docker/elisp/ etc from the ii layer and see what's left.
  These layers are noted in our [[*layers][reference section on layers]]
  #+begin_example elisp
 ;; List of layers we depend on
                                      auto-completion
                                      docker
                                      emacs-lisp
                                      git
                                      ;; github
                                      go
                                      graphviz
                                      html
                                      ;; ipython-notebook
                                      javascript
                                      org
                                      org-capture
                                      lsp
                                      python
                                      markdown
                                      sql
                                      version-control
                                      yaml
  #+end_example

  I am not sure we need all of them, I'll annotate my reasoniung to what I add

  #+begin_example elisp
 ;; List of layers we depend on
                                      auto-completion ;; already added
                                      docker ;; necessary
                                      emacs-lisp ; already added
                                      git ; already added
                                      ;; github nah
                                      go ;needed
                                      graphviz ; not sure if we use this or how we use this.  leaving out
                                      html ; needed
                                      ;; ipython-notebook
                                      javascript ;needed
                                      org ;already added
                                      org-capture ;already added
                                      lsp ; needed for go i believe
                                      python ; needed
                                      markdown ; needed
                                      sql ; needed
                                      version-control ; nah, feels overkill with already having git?
                                      yaml ; needed
  #+end_example
** Add node to box
   When testing the javascript layer, by attempting to run a js code block, got error 'node command not found'.  So I need to install node on this machine, and remember it's a requirement on any other machines we set up.
[[https://github.com/nvm-sh/nvm][nvm]] is a great way to install node on any os.

   #+NAME: Run nvm script
   #+begin_src shell
     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
   #+end_src

   once i restart the terminal...
   #+NAME: confirm nvm installed
   #+begin_src shell
     command -v nvm
   #+end_src

   Then install node
   #+NAME: Install node
   #+begin_src shell
     nvm install node
   #+end_src

   Check it worked
   #+NAME: Check node is installed
   #+begin_src shell
     node --version
   #+end_src

   #+RESULTS: Check node is installed
   : v14.1.0

  nice

** Add better syntax defaults for web dev
   For some reason, spacemacs insists on 4 space indents for all web dev languyages, even if you explicilty set them differently.  The only fix I found was in a person's config shared on github (linked in user-config).  I am adding it to this user-config now too..
** Add company-tern to excluded packages
   Every time I started up emacs it would tell me there was a new package founda nd attempt to install it, then run an error because comapny-tern was not found.

   company-tern is no longer in melpa and so cannot be downloaded and installed.  It is a small addition to tern, a javascript autocomplete library.  So it is non-essential.

We can add it to excluded packages in our .spacemacs file (within the layers section)  so we no longer try to download it (thanks to hh for this trick!)

** better understand ii layer....bring it over to this area so i can edit it more easily.
   I added the contents of our layer to the reference section.
   The knottiest parts are our packages and funcs.  I can move the config part ou8t as a package to practice that, move stephen's timetracker to a package, and then I think tackle packages and might need to pair with hh on the funcs.  In the funcs is all our code around getting tmate to work in cluster and populating clipboards and all of that, and these are things that currently don't work consistently, so there will need to be some refactoring.
** [3/3] layer->packages
*** DONE layers
    CLOSED: [2020-05-03 Sun 21:11]
*** DONE config
    CLOSED: [2020-05-03 Sun 22:13]
  This is not an exact porting of our configuration layer.  I wanted to keep it as simple as possible then add stuff if needed.
  Noted:
  - didn't do any of our 'put safe local variable as i didn't fully understand what they did and i think were in service of our old methods
  - removed the go variable for env path, as i'd like to have an ii-go package (not all of ii and ii frienz will be working with go)
  - removed the requiring of org-tempo to use `<s`.  Org is so fickle with the version numbers and having it work with rest of spacemacs.  Feels safter to just switch to always using `,ib` then to have version drift in our main tool
  - removed all tmate and tmux variables from settings as these should be set in our ii-tmate package/layer
  - removed the spaceline-org-clock as I do not understand what it does, and want it to be added itnetionally (believe it just adds a clock to the modeline when in org-mode....which feels like too many clocks!)

My initial plan was ot make this an 'ii-sensible' package. As I was doing this i realized that having a package of just a few configs is a bit overkill.  We are already having a custom layer wiuth the entire .spacemacs.d  We can add these configurations into the user-config portion, well commented so another ii person can understand them and toggle them as needed.  So I did that instead.
*** DONE packages
    CLOSED: [2020-05-04 Mon 22:32]
    First, let's remove all commented out portions of the package.el.  The comments are still in the reference, but will help us scan it more easily.

#+begin_src elisp
  ;;; Code:
  (defun ii/init-ob-shell ()
    (use-package ob-shell)
    )
  (defun ii/init-feature-mode ()
    (use-package feature-mode))
  (defun ii/init-ob-tmate ()
    (use-package ob-tmate))
  (defun ii/init-ob-javascript ()
    (use-package ob-javascript))
  (defun ii/init-ob-powershell ()
    (use-package ob-powershell))
  (defun ii/init-ob-tmux ()
    (use-package ob-tmux))
  (defun ii/init-iterm ()
    (use-package iterm))
  (defun ii/init-ob-sql-mode ()
    (use-package ob-sql-mode))
  (defun ii/init-ox-gfm ()
    (use-package ox-gfm))
  (defun ii/init-s ()
    (use-package ob-sql-mode))
  (defun ii/init-xclip ()
    (use-package xclip))
  (defun ii/init-org-checklist ()
    (use-package org-checklist))
  (defun ii/init-ob-go ()
    (use-package ob-go))
  (defun ii/init-ob-async ()
    (use-package ob-async))
  (defun ii/init-kubernetes ()
    (use-package kubernetes))
  (defun ii/init-kubernetes-evil ()
    (use-package kubernetes-evil))

  (defun ii/init-osc52e ()
    )
  (defun ii/post-init-osc52e ()
    (require 'osc52e)
    (osc52-set-cut-function)
    )
  (setq ob-async-pre-execute-src-block-hook nil)
  (defun ii/post-init-ob-async ()
    (message "ii/post-init-ob-async YAHOOOOOOOO!!")
    ;; lsp go-mode-hook should go into post-init-go-mode...
    ;; but for some reason ^^ isn't called
    ;; FIXME
    (add-hook 'go-mode-hook #'lsp)
    (add-hook 'ob-async-pre-execute-src-block-hook
              '(lambda ()
                 (require 'org)
                 (require 'ob-shell)
                 (require 'ob-javascript)
                 (require 'ob-powershell)
                 ;;(require 'ob-sql-mode)
                 (add-to-list 'org-babel-load-languages '(shell . t))
                 (add-to-list 'org-babel-load-languages '(javascript . t))
                 ;;(add-to-list 'org-babel-load-languages '(sql-mode . t))
                 )))
  ;; When we execute src blocks, we have some advice
  (advice-add 'org-babel-execute-src-block
              :before #'ii/advice:org-babel-execute-src-block)
  ;; Disable the execute advice when we export src blocks
  (advice-add 'org-babel-exp-src-block
              :around #'ii/advice:org-babel-exp-src-block)
  (defun ii/post-init-go-mode ()
    (message "ii/post-init-go-mode YAHOOOOOOOO!!")
    )
  (defun ii/post-init-lsp-mode ()
    (message "ii/post-init-lsp-mode YAHOOOOOOOO!!")
     (setq
     go-backend #'lsp
     lsp-navigation 'both
     lsp-ui-doc-enable t
     lsp-ui-doc-position 'top
     lsp-ui-doc-alignment 'frame
                                          ; lsp-ui-doc-border 'white
     lsp-ui-doc-use-childframe t
     lsp-ui-doc-use-webkit t
     lsp-ui-doc-delay 0.2
     lsp-ui-doc-include-signature nil
     lsp-ui-sideline-show-symbol t
     lsp-ui-remap-xref-keybindings t
     lsp-ui-sideline-enable t
     lsp-prefer-flymake nil
     lsp-print-io t
     )
    )
  (defun ii/pre-init-org ()
    (spacemacs|use-package-add-hook org
      :post-config (progn
                     (add-to-list 'org-babel-load-languages
                                  '(go . t))
                     (add-to-list 'org-babel-load-languages
                                  '(javascript . t))
                     (add-to-list 'org-babel-load-languages
                                  '(shell . t))
                     (add-to-list 'org-babel-load-languages
                                  '(sql-mode . t))
                     (add-to-list 'org-babel-load-languages
                                  '(emacs-lisp . t))
                     )))
  (defun ii/post-init-org ()
    (require 'ob-shell)
    (require 'ob-javascript)
    (require 'ob-powershell)
    (require 'cal-iso)
    )
  (defun ii/post-init-yasnippet ()
    ;; TODO do this within let for local var
    (spacemacs|use-package-add-hook yasnippet
      :post-config (progn
                     (add-to-list 'yas-snippet-dirs (expand-file-name
                                                     "snippets"
                                                     (configuration-layer/get-layer-local-dir
                                                      'ii))
                                  t)
                     (yas-load-directory (expand-file-name
                                          "snippets"
                                          (configuration-layer/get-layer-local-dir
                                           'ii)))
    )))

  (defconst ii-packages
    `(
      feature-mode
      (ob-javascript
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-javascript")
       )
      (ob-powershell
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-powershell")
       )
      (iterm
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "iterm")
       )
      (ob-tmate
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-tmate")
       )
      (kubernetes
        :ensure t
        :commands (kubernetes-overview))
      (kubernetes-evil
        :ensure t
        :after kubernetes)
      (ob-go :ensure t
             :location (recipe
                        :fetcher github
                        :repo "pope/ob-go"))
      (ob-tmux :ensure t)
      (ob-sql-mode :ensure t)
      (ob-shell :ensure t
                :location built-in)
      (osc52e :ensure t
               :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "osc52e")
      (org-checklist :ensure t
                     :location built-in)
      (ob-async :ensure t
                :location (recipe
                           :fetcher github
                           :repo "astahlman/ob-async"))
      s ; added
      xclip
      ;; yasnippet ; already a part of spacemacs
      )
  ;;; packages.el ends here

#+end_src

How much of this is necessary now?  How much is added through layers already?
s is additional and good, so I added it to our packages
xclip will be useful for us, assuming we using terminal...but why yasnippet?  that's already included yah?  so i'm removing it.

Next, let's remove any layers that we could import just as packages, or that are too specifici (eg powershell and iterm)
#+begin_src elisp
  ;;; Code:
  (defun ii/init-ob-tmate ()
    (use-package ob-tmate))
  (defun ii/init-ob-tmux ()
    (use-package ob-tmux))
  (defun ii/init-iterm ()
    (use-package iterm))
  (defun ii/init-osc52e ()
    )
  (defun ii/post-init-osc52e ()
    (require 'osc52e)
    (osc52-set-cut-function)
    )
  (setq ob-async-pre-execute-src-block-hook nil)
  (defun ii/post-init-ob-async ()
    (message "ii/post-init-ob-async YAHOOOOOOOO!!")
    ;; lsp go-mode-hook should go into post-init-go-mode...
    ;; but for some reason ^^ isn't called
    ;; FIXME
    (add-hook 'go-mode-hook #'lsp)
    (add-hook 'ob-async-pre-execute-src-block-hook
              '(lambda ()
                 (require 'org)
                 (require 'ob-shell)
                 (require 'ob-powershell)
                 (add-to-list 'org-babel-load-languages '(shell . t))
                 )))
  ;; When we execute src blocks, we have some advice
  (advice-add 'org-babel-execute-src-block
              :before #'ii/advice:org-babel-execute-src-block)
  ;; Disable the execute advice when we export src blocks
  (advice-add 'org-babel-exp-src-block
              :around #'ii/advice:org-babel-exp-src-block)
  (defun ii/post-init-org ()
    (require 'ob-shell)
    (require 'ob-powershell)
    (require 'cal-iso))

  (defconst ii-packages
    `(
      (iterm
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "iterm")
       )
      (ob-tmate
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-tmate")
       )
      (ob-tmux :ensure t)
      (osc52e :ensure t
               :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "osc52e")
      )
  ;;; packages.el ends here
#+end_src

I think i've lifted the most I could and put them into packages.  Though the packages are installed, they aren't active until you do a '(require package).   In many cases you wo7uld want this to be file by file or dir by dir, but in others (e.g. ob-go and ob-sql-mode) we may wanna make them as layers instead so they are added in at the start and we dont' have to remember to add a file local variable.
** Create an ii-go layer
   This let's us ensure when go  is added it can be used in a literate way.  it is also a simple enough start to writing our custom layers.

   til: you can add the go layer in layers.el and it will then download and load it if it isn't htere already.  in other words, you don't need to add go twice in our configuration-layers.  we just add ii-go and it handles the rest.
** Create an ii-org layer
   I believe we could set much of our customization and turn on ob-async by default.  this would be nice!
   I've moved ob-async into our org layer, and all the settings for github support and reveal support and all that.
   next is to move the various ii hacks related to org into our config.el

   Here is the funcs.el from humacs with all commented lines removed and the timesheet stuff removed (as it should be its own package).
   #+begin_src elisp
       ;;; This section is for tmate / copy / paste for creating/using the right eye
       ;; ensure a process can run, discard output
       (defun runs-and-exits-zero (program &rest args)
         "Run PROGRAM with ARGS and return the exit code."
         (with-temp-buffer
           (if (= 0 (apply 'call-process program nil (current-buffer) nil args))
               'true
             ))
         )

       (defun xclip-working ()
         "Quick Check to see if X is working."
         (if (getenv "DISPLAY")
             'true
           ;; )
           )
         )

       (defun create-target-script (filename command)
         "Create a temporary script to create/connect to target tmate window"
         (message "Creating a script file in tmp")
         (with-current-buffer (find-file-noselect filename)
           (erase-buffer)
           (insert-for-yank
            (concat "\n#!/bin/sh\n\n" command))
           (save-buffer)
           (set-file-modes filename #o755)
           )
         )

       (defun ii/populate-clipboard-with-tmate-connect-command()
         "Populate the clipboard with the correct command to connect to tmate"
         (message "Trying to populate clipboard")
         (let ((attach-command (if ;; incluster
                                   (file-exists-p "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
                                   ;; use kubectl
                                   (concat "kubectl exec -n "
                                           (with-temp-buffer
                                             (insert-file-contents
                                              "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
                                             (buffer-string))
                                           " -ti " system-name
                                           " attach " (file-name-base load-file-name))
                                 ;; out of cluster, use tmate directly
                                 (concat "tmate -S " socket " attach"))
                               ))
           (gui-select-text attach-command)
           (osc52-interprogram-cut-function attach-command)
                                 )
         )
       (defun populate-terminal-clipboard ()
         "Populate the osc52 clipboard via terminal with the start-tmate-sh"
         ;; TODO
         (message "Unable to set X Clipboard to contain the start-tmate-sh")
         ;; (create-target-script tmate-sh start-tmate-command)
         ;; (gui-select-text tmate-sh)
         (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
             (setq current-tmate-sh (concat "kubectl exec -ti " system-name " attach " (file-name-base load-file-name)))
           (progn
             (setq current-tmate-sh tmate-sh) ;; since tmate-sh is buffer-local..
             (if (string= (getenv "CLOUD_SHELL") "true")
                 (setq current-tmate-ssh (concat "gcloud alpha cloud-shell ssh --ssh-flag=-t --command=" tmate-sh))
               (if (string= system-name "sharing.io")
                   (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
                   (setq current-tmate-ssh tmate-sh)
                 )
               )
             )
         )
         ;;(setq current-tmate-ssh (concat "export IISOCK=" socket " ; rm -f $IISOCK ; ssh -tAX " ssh-user-host " -L $IISOCK:$IISOCK " tmate-sh))
         (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
             (setq current-tmate-ssh (concat "kubectl exec -ti " system-name " attach " (file-name-base load-file-name)))
           (if (string= (getenv "CLOUD_SHELL") "true")
               (setq current-tmate-ssh (concat "gcloud alpha cloud-shell ssh --ssh-flag=-t --command=" tmate-sh))
             (if (string= system-name "sharing.io")
                 (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
               (setq current-tmate-ssh tmate-sh))
             )
           )
         (message "Trying to set via osc52")
         (osc52-interprogram-cut-function current-tmate-ssh)
         (with-current-buffer (get-buffer-create "start-tmate-sh" )
           (erase-buffer)
            (insert-for-yank "You may need to copy this manually:\n\n" )
            (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
                (insert-for-yank (concat "\nConnect to this in cluster tmate via:\n\n" current-tmate-sh))
              (insert-for-yank
               (concat "\nTo open on another host, forward your iisocket by pasting:\n\n" current-tmate-ssh
                     "\n\nOR open another terminal on the same host and paste:\n\n" current-tmate-sh)
             )
            )
         )
       )
       (defun populate-x-clipboard ()
         "Populate the X clipboard with the start-tmate-sh"
         (message "Setting X Clipboard to contain the start-tmate-sh")
         (xclip-mode 1)
         (create-target-script tmate-sh start-tmate-command)
         (setq current-tmate-sh tmate-sh) ;; since tmate-sh is buffer-local..
         (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
         (if (string= ssh-host "")
             (progn
               (gui-select-text current-tmate-sh)
               (with-current-buffer (get-buffer-create "start-tmate-sh")
                 (insert-for-yank "The following has been populated to your local X clipboard:\n")
                 (insert-for-yank
                  ;; we can use the global current-tmate-sh
                  (concat "Open another terminal on the same host and paste:\n\n" current-tmate-sh)
                  ))
               )
           (progn
             (gui-select-text current-tmate-ssh)
             (with-current-buffer (get-buffer-create "start-tmate-ssh")
               (insert-for-yank "The following has been populated to your local X clipboard:\n")
               (insert-for-yank
                ;; we can use the global current-tmate-sh
                (concat "Open another terminal on the your emacs host and paste:\n\n" current-tmate-ssh)
                ))
             )
             )
         (xclip-mode 0)
         ;; and unset it when done
         (setq current-tmate-ssh nil)
         (setq current-tmate-sh nil)
         )
        (defun ssh-find-agent ()
         (interactive)
         (setenv "SSH_AUTH_SOCK" (shell-command-to-string "find /tmp /run/host/tmp/ -type s -regex '.*/ssh-.*/agent..*$' 2> /dev/null | tail -n 1 | tr -d '\n'"))
         (message (getenv "SSH_AUTH_SOCK"))
         )
       (with-eval-after-load "org"
         (add-to-list 'org-structure-template-alist
                      `("g" . "src go")))

       (defun alist-set (key val alist &optional symbol)
         "Set property KEY to VAL in ALIST. Return new alist.
       This creates the association if it is missing, and otherwise sets
       the cdr of the first matching association in the list. It does
       not create duplicate associations. By default, key comparison is
       done with `equal'. However, if SYMBOL is non-nil, then `eq' is
       used instead.

       This method may mutate the original alist, but you still need to
       use the return value of this method instead of the original
       alist, to ensure correct results."
         (if-let ((pair (if symbol (assq key alist) (assoc key alist))))
             (setcdr pair val)
           (push (cons key val) alist))
         alist)

       ;; Some local variable defaults that set our database connections
       ;; note the UID being dynamic, so we can have a dedicated port per person
       (defun ii/sql-org-hacks()
         (message "START: ii/sql-org-hacks")
         (set (make-local-variable 'sql-sqlite-program)
              (executable-find "sqlite3"))
         (set (make-local-variable 'sql-server)
              (if (getenv "PGHOST")
                  (getenv "PGHOST")
                (if (file-exists-p "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
                    "postgres"
                    "localhost"
                  )))
         (set (make-local-variable 'sql-port)
              (if (getenv "PGPORT")
                  (string-to-number (getenv "PGPORT"))
                5432))
         (set (make-local-variable 'sql-user)
              (if (getenv "PGUSER")
                  (getenv "PGUSER")
                "apisnoop"))
         (set (make-local-variable 'sql-database)
              (if (getenv "PGDATABASE")
                  (getenv "PGDATABASE")
                "apisnoop"))
         (set (make-local-variable 'sql-product)
              '(quote postgres))
         (set (make-local-variable 'sql-connection-alist)
              (list
               (list 'raiinbow
                     (list 'sql-product '(quote sqlite))
                     (list 'sql-database "raiinbow.sqlite")
                     )
               (list 'apisnoop
                     (list 'sql-product '(quote postgres))
                     (list 'sql-user (getenv "PGUSER"))
                     (list 'sql-database (getenv "PGDATABASE"))
                     (list 'sql-port sql-port)
                     (list 'sql-server (getenv "PGHOST")))
               (list 'none
                     (list 'sql-product '(quote postgres))
                     (list 'sql-user sql-user)
                     (list 'sql-database sql-database)
                     (list 'sql-port sql-port)
                     (list 'sql-server sql-server))))
         (message "END: ii/sql-org-hacks")
         )

       ;; This sets the local-variables for tmate so that they are specific to the user
       ;; and org-file name
       (defun ii/tmate-org-hacks()
         (message "START: ii/tmate-org-hacks")
         (message "END: ii/tmate-org-hacks")
         )

       ;; This uses alist-set to override the default code block parameters
       (defun ii/before-local-org-hacks()
         (message "BEGIN ii/before-local-org-hacks")
         (ii/tmate-org-hacks)
         (ii/sql-org-hacks)
         (make-local-variable 'org-babel-default-header-args)
         (setq org-babel-default-header-args
               (alist-set :noweb "yes"
               (alist-set :noweb-ref "(org-entry-get nil \"ITEM\")"
               (alist-set :comments "org"
               (alist-set :exports "both"
               (alist-set :eval "never-export"
               (alist-set :results "replace code"
                          org-babel-default-header-args)))))))
         (make-local-variable 'org-babel-default-header-args:tmate)
         (setq org-babel-default-header-args:tmate
               (alist-set :exports "code"
               (alist-set :session user-login-name
               (alist-set :window user-login-name
               ;; (alist-set :socket socket
                          org-babel-default-header-args:tmate)
               ;; )
               )))
         (make-local-variable 'org-babel-default-header-args:tmate)
         (setq org-babel-default-header-args:tmux
               (alist-set :exports "code"
               (alist-set :session user-login-name
               (alist-set :window user-login-name
                          ;; (alist-set :socket socket
                          org-babel-default-header-args:tmate)
                          ;; )
               ))
               )
         (make-local-variable 'org-babel-default-header-args:sql-mode)
         (setq org-babel-default-header-args:sql-mode
               (alist-set :results "replace code"
               (alist-set :product "postgres"
               (alist-set :comments "org"
               (alist-set :wrap "SRC example"
                          org-babel-default-header-args:sql-mode)))))
         (make-local-variable 'org-babel-default-header-args:shell)
         (setq org-babel-default-header-args:shell
               (alist-set :results "output code verbatim replace"
                          (alist-set :wrap "example"
                                     org-babel-default-header-args:shell)))
         (make-local-variable 'org-babel-default-header-args:bash)
         (setq org-babel-default-header-args:bash
               (alist-set :results "output code verbatim replace"
               (alist-set :wrap "example"
                          org-babel-default-header-args:bash)))
         (make-local-variable 'org-babel-default-header-args:sh)
         (setq org-babel-default-header-args:sh
               (alist-set :results "output code verbatim replace"
               (alist-set :wrap "example"
                          org-babel-default-header-args:sh)))
         (message "END ii/before-local-org-hacks")
         )

       (defun ii/advice:org-babel-exp-src-block (obde)
         "Disable the execute advice when we export src blocks"
         (advice-remove 'org-babel-execute-src-block
                        #'ii/advice:org-babel-execute-src-block)
         (funcall obde)
         (advice-add 'org-babel-execute-src-block
                      :before #'ii/advice:org-babel-execute-src-block)
         )
       (defun ii/advice:org-babel-execute-src-block (&optional arg info params)
         "if ii-mate not set and this is a tmate src block"
         (interactive)
         ;; only run if this is a tmate block
         (if (string= "tmate" (car (org-babel-get-src-block-info t)))
             (let* (
                    (org-session (alist-get :session (nth 2 (org-babel-get-src-block-info t))))
                    (socket (alist-get :socket (nth 2 (org-babel-get-src-block-info t))))
                    (session-dir (cdr (assq :dir params)))
                    (session-name (ob-tmate--tmate-session org-session))
                    (session-window (ob-tmate--tmate-window org-session))
                    (session-socket (if socket
                                        (expand-file-name socket)
                                      (ob-tmate--tmate-socket org-session)
                              ))
                    (session-y (message "session-socket: %S" session-socket))
                   )
               (progn
                 (message "about to trying to start ii-tmate-process")
                 (make-local-variable 'ii-tmate-configured)
                 ;; ensure a tmate server has been started
                 (unless ii-tmate-process
                   (progn
                     (setq ii-tmate-process
                           (start-process-shell-command
                            (concat session-name "-tmate-process")
                            (concat "**" session-name "-tmate-process**")
                            (concat "tmate"
                                    " -d -v"
                                    " -S " session-socket
                                    " new-session"
                                    " -s " session-name
                                    " -n " "init"; session-window
                                    " -c " session-dir
                                    "read X")
                            ))
                            ))
                 )
             )
           ))

       ;; This is the function intended to be run as a before-hack-local-variables-hook
       (defun ii/before-local-var-hacks()
         (message "BEGIN: ii/before-local-var-hacks")
         (if (string-equal mode-name "Org")
             (if (alist-get 'ii file-local-variables-alist)
                 (ii/before-local-org-hacks)
               )
         )
         (message "END: ii/before-local-var-hacks")
         (message "ii org-mode hacks applied")
         )


     ,#+end_src
   #+end_src

   The key things we want is all the org-mode header defaults...can we just lift them out and have them apply to all our org files?
   I wont include any related to tmate or that have apisnoop specific things in them, as that should be their own layer.  I feel the same about ii-sql-mode, and so won't put any sql specifications in here either.

   That gives us
   #+begin_src elisp
     (make-local-variable 'org-babel-default-header-args)
     (setq org-babel-default-header-args
           (alist-set :noweb "yes"
           (alist-set :noweb-ref "(org-entry-get nil \"ITEM\")"
           (alist-set :comments "org"
           (alist-set :exports "both"
           (alist-set :eval "never-export"
           (alist-set :results "replace code"
                      org-babel-default-header-args)))))))
     (make-local-variable 'org-babel-default-header-args:shell)
     (setq org-babel-default-header-args:shell
           (alist-set :results "output code verbatim replace"
                      (alist-set :wrap "example"
                                 org-babel-default-header-args:shell)))
     (make-local-variable 'org-babel-default-header-args:bash)
     (setq org-babel-default-header-args:bash
           (alist-set :results "output code verbatim replace"
           (alist-set :wrap "example"
                      org-babel-default-header-args:bash)))
     (make-local-variable 'org-babel-default-header-args:sh)
     (setq org-babel-default-header-args:sh
           (alist-set :results "output code verbatim replace"
           (alist-set :wrap "example"
                      org-babel-default-header-args:sh)))
   #+end_src

   if we add the variables for the shell header args, I am not sure if we need to add the same things for the sh and bash header args.  All of them are wrapped up in ob-shell, which sees all of them as the same (see the variable org-babel-shell-names)

** Create an ii-sql layer
   This will bring in our literate work, set headers for our org src blocks and set us up for the postgres work.

   it's simple now as i don't want ot have anything assumed because of apisnoop.  When i went through our current sql-hacks it looks like they work to set up the blocks as postgres blocks and to set the default db and user to be apisnoop.  Both are assumptions that should probably go into an apisnoop layer.

** Create an ii-tools layer
   Sort of a misc. layer that holds useful all around tools, like find-ssh-agent and stephen's timesheet.

** Create an ii-mate layer
*** Understand what code relates just to tmate and tmux
    There's a couple packages we bring in, and then some logic around setting custom sessions and such...how much of it is wrapped up in apisnoop?

* Testing things all work
** Refile Me!
** web stuff
   #+NAME: Web Works
   #+begin_src web
     <html>
         <head>
             <title>web works!</title>
         </head>
         <body>
             <h1>very good</h1>
         </body>
     </html>
   #+end_src

   #+NAME: Javascript
   #+begin_src js :results output :var FRIEND="Zach"
     let adj = 'very cool';

     function compliment (person) {
       return `Hello, ${person}, you are ${adj}`;
     };

     let giveCompliment = compliment(FRIEND);
     console.log(giveCompliment);
   #+end_src

   #+RESULTS: Javascript
   : Hello, Zach, you are very cool

   Thanks!

** go stuff
   #+NAME: Sample go code
   #+begin_src go
     package main
     import ("fmt")

     func main() {
       fmt.Println("Hello, Zach, you are very suave.")
     }

   #+end_src

   #+RESULTS: Sample go code
   : Hello, Zach, you are very suave.



   We have a go layer, but ob-go is a separate thing, and so we cannot execute this function.  We will need to add it, which feels like a nice opportunity to have an ii-go layer that has our custom setup for go.  Or if it's fairly minimal, to just add it to our user-config.  A convo with Caleb would help with this.
** python stuff
   let's verify we are using python3 by default
   #+NAME: print hello world
   #+begin_src python :results output
   print("hello world")
   #+end_src

   #+RESULTS: print hello world
   : hello world

   Sweet!

** elisp stuff
   #+:NAME: s functions should work
   #+begin_src elisp :results output
   (print (s-pad-left 10 "-" "fun"))
   #+end_src
   #+RESULTS:
   :
   : "-------fun"

** sql stuff
   #+begin_src sql-mode
   \d+
   #+end_src
** org stuff
*** check async works

    #+begin_src shell
   sleep 10 && echo 'sync'
    #+end_src

    #+RESULTS:
    #+begin_src shell
    sync
    #+end_src

    #+begin_src shell :async
      sleep 3s && echo 'async'
    #+end_src

    #+RESULTS:
    #+begin_example
    async
    #+end_example

* Reference
** The original ii layer
*** packages
#+begin_src elisp
  ;;; packages.el --- ii layer packages file for Spacemacs.
  ;;
  ;; Copyright (c) 2012-2018 Sylvain Benner & Contributors
  ;;
  ;; Author: Zach Mandeville <zz@sharing.io>
  ;; URL: https://github.com/syl20bnr/spacemacs
  ;;
  ;; This file is not part of GNU Emacs.
  ;;
  ;;; License: GPLv3

  ;;; Commentary:

  ;; See the Spacemacs documentation and FAQs for instructions on how to implement
  ;; a new layer:
  ;;
  ;;   SPC h SPC layers RET
  ;;
  ;;
  ;; Briefly, each package to be installed or configured by this layer should be
  ;; added to `ii-packages'. Then, for each package PACKAGE:
  ;;
  ;; - If PACKAGE is not referenced by any other Spacemacs layer, define a
  ;;   function `ii/init-PACKAGE' to load and initialize the package.

  ;; - Otherwise, PACKAGE is already referenced by another Spacemacs layer, so
  ;;   define the functions `ii/pre-init-PACKAGE' and/or
  ;;   `ii/post-init-PACKAGE' to customize the package as it is loaded.

  ;;; Code:
  (defun ii/init-ob-shell ()
    (use-package ob-shell)
    ;;(require 'ob-shell)
    )
  (defun ii/init-feature-mode ()
    (use-package feature-mode))
  (defun ii/init-ob-tmate ()
    (use-package ob-tmate))
  (defun ii/init-ob-javascript ()
    (use-package ob-javascript))
  (defun ii/init-ob-powershell ()
    (use-package ob-powershell))
  (defun ii/init-ob-tmux ()
    (use-package ob-tmux))
  (defun ii/init-iterm ()
    (use-package iterm))
  (defun ii/init-ob-sql-mode ()
    (use-package ob-sql-mode))
  (defun ii/init-ox-gfm ()
    (use-package ox-gfm))
  (defun ii/init-s ()
    (use-package ob-sql-mode))
  (defun ii/init-xclip ()
    (use-package xclip))
  (defun ii/init-org-checklist ()
    (use-package org-checklist))
  (defun ii/init-ob-go ()
    (use-package ob-go))
  (defun ii/init-ob-async ()
    (use-package ob-async))
  (defun ii/init-kubernetes ()
    (use-package kubernetes))
  (defun ii/init-kubernetes-evil ()
    (use-package kubernetes-evil))

  (defun ii/init-osc52e ()
    )
  (defun ii/post-init-osc52e ()
    (require 'osc52e)
    (osc52-set-cut-function)
    )
  (setq ob-async-pre-execute-src-block-hook nil)
  (defun ii/post-init-ob-async ()
    (message "ii/post-init-ob-async YAHOOOOOOOO!!")
    ;; lsp go-mode-hook should go into post-init-go-mode...
    ;; but for some reason ^^ isn't called
    ;; FIXME
    (add-hook 'go-mode-hook #'lsp)
    (add-hook 'ob-async-pre-execute-src-block-hook
              '(lambda ()
                 (require 'org)
                 (require 'ob-shell)
                 (require 'ob-javascript)
                 (require 'ob-powershell)
                 ;;(require 'ob-sql-mode)
                 (add-to-list 'org-babel-load-languages '(shell . t))
                 (add-to-list 'org-babel-load-languages '(javascript . t))
                 ;;(add-to-list 'org-babel-load-languages '(sql-mode . t))
                 )))
  ;; When we execute src blocks, we have some advice
  (advice-add 'org-babel-execute-src-block
              :before #'ii/advice:org-babel-execute-src-block)
  ;; Disable the execute advice when we export src blocks
  (advice-add 'org-babel-exp-src-block
              :around #'ii/advice:org-babel-exp-src-block)
  ;; (defun ii/pre-init-lsp-mode ()
  ;;   (spacemacs|use-package-add-hook lsp-mode
  ;;     :post-config (progn
  ;;                    )))
  (defun ii/post-init-go-mode ()
    (message "ii/post-init-go-mode YAHOOOOOOOO!!")
    )
  (defun ii/post-init-lsp-mode ()
    (message "ii/post-init-lsp-mode YAHOOOOOOOO!!")
     (setq
     go-backend #'lsp
     lsp-navigation 'both
     lsp-ui-doc-enable t
     lsp-ui-doc-position 'top
     lsp-ui-doc-alignment 'frame
                                          ; lsp-ui-doc-border 'white
     lsp-ui-doc-use-childframe t
     lsp-ui-doc-use-webkit t
     lsp-ui-doc-delay 0.2
     lsp-ui-doc-include-signature nil
     lsp-ui-sideline-show-symbol t
     lsp-ui-remap-xref-keybindings t
     lsp-ui-sideline-enable t
     lsp-prefer-flymake nil
     lsp-print-io t
     )
    )
  (defun ii/pre-init-org ()
    (spacemacs|use-package-add-hook org
      :post-config (progn
                     (add-to-list 'org-babel-load-languages
                                  '(go . t))
                     ;;(add-to-list 'org-babel-load-languages
                     ;;             '(sh . t))
                     (add-to-list 'org-babel-load-languages
                                  '(javascript . t))
                     (add-to-list 'org-babel-load-languages
                                  '(shell . t))
                     (add-to-list 'org-babel-load-languages
                                  '(sql-mode . t))
                     (add-to-list 'org-babel-load-languages
                                  '(emacs-lisp . t))
                     )))
  (defun ii/post-init-org ()
    (require 'ob-shell)
    (require 'ob-javascript)
    (require 'ob-powershell)
    (require 'cal-iso)
    )
  (defun ii/post-init-yasnippet ()
    ;; TODO do this within let for local var
    (spacemacs|use-package-add-hook yasnippet
      :post-config (progn
                     (add-to-list 'yas-snippet-dirs (expand-file-name
                                                     "snippets"
                                                     (configuration-layer/get-layer-local-dir
                                                      'ii))
                                  t)
                     (yas-load-directory (expand-file-name
                                          "snippets"
                                          (configuration-layer/get-layer-local-dir
                                           'ii)))
    )))

  (defconst ii-packages
    `(
      ;; async
      ;; closql
      ;; command-log-mode
      ;; dash
      ;; demo-it
      ;; ein ;; https://github.com/millejoh/emacs-ipython-notebook
      ;; emms
      ;; emacsql-sqlite
      ;; evil-vimish-fold
      ;; fancy-narrow
      feature-mode
      ;;(forge :location "/usr/local/share/emacs/site-lisp/forge"
      ;;       :afer magit)
      ;; ghub
      ;;go-playground
      ;;go-dlv
      ;;gorepl-mode ;; go
      ;;graphql
      ;;graphql-mode
      ;; (graphql-mode :location (recipe
      ;;                          :fetcher github
      ;;                          :repo "davazp/graphql-mode"
      ;;                          :commit "301a218"
      ;;                          ))
      ;; groovy-mode
      ;; jupyter
      ;; ob-async
      ;; (ob-javascript
      ;;           :location (recipe
      ;;                      :fetcher github
      ;;                      :repo "zweifisch/ob-javascript"))
      (ob-javascript
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-javascript")
       )
      (ob-powershell
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-powershell")
       )
      (iterm
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "iterm")
       )
      (ob-tmate
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-tmate")
       )
      (kubernetes
        :ensure t
        :commands (kubernetes-overview))

      ;; If you want to pull in the Evil compatibility package.
      (kubernetes-evil
        :ensure t
        :after kubernetes)
      ;; (ob-tmate :ensure t
      ;;           :location (recipe
      ;;                      :fetcher github
      ;;                      :tag "0.1.7"
      ;;                      :repo "ii/ob-tmate"))
      (ob-go :ensure t
             :location (recipe
                        :fetcher github
                        :repo "pope/ob-go"))
      (ob-tmux :ensure t)
      (ob-sql-mode :ensure t)
      (ob-shell :ensure t
                :location built-in)
      ;; FIXME: likely a way to ask for this layer dir directly
      (osc52e :ensure t
               :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "osc52e")
      ;;osc52e-package-dir
         )
              ;;:location ,(expand-file-name (concat (car dotspacemacs-configuration-layer-path) "ii/osc52e")))
              ;; :location (recipe
              ;;            :fetcher git
              ;;            :url "https://gist.github.com/49eabc1978fe3d6dedb3ca5674a16ece.git"
              ;;            ))
      ;;(org-checklist :ensure t)
      (org-checklist :ensure t
                     :location built-in)
      (ob-async :ensure t
                :location (recipe
                           :fetcher github
                           :repo "astahlman/ob-async"))
      ;; This should go as a layer dependency for org via

      ;; (org :variables
      ;;      org-enable-github-support t
      ;;      org-enable-bootstrap-support t
      ;;      org-enable-reveal-js-support t
      ;;      )
      ;;  (ox-gfm :ensure t)
      ;; oer-reveal
      ;; (org-protocol-capture-html :location (recipe
      ;;                                       :fetcher github
      ;;                                       :repo "alphapapa/org-protocol-capture-html"
      ;;                                       :commit "23a1336c"))
      ;; org-re-reveal-ref
      ;; (emacs-reveal :location (recipe
      ;;                          :fetcher gitlab
      ;;                          :repo "oer/emacs-reveal"
      ;;                          :commit "d0aa1f9d"))
      ;;ob-go
      ;; org-protocol ;; https://orgmode.org/worg/org-contrib/org-protocol.html
      ;; http://tech.memoryimprintstudio.com/org-capture-from-external-applications/
      ;; https://github.com/sprig/org-capture-extension
      ;; org-babel-eval-in-repl
      ;; org-tree-slide
      ;; org-mu4e
      ;; org-pdfview
      ;; ox-reveal
      ;; pdf-tools ;; https://github.com/politza/pdf-tools
      ;; pdf-view
      s
      ;; scad-mode
      ;; slime
      ;; transcribe
      ;; togetherly
      ;; vimish-fold
      xclip
      ;; (yasnippet :location (recipe
      ;;                       :fetcher github
      ;;                       :repo "joaotavora/yasnippet"
      ;;                       :branch "0.13.0"))
      ;; :commit "89eb7ab"))
      ;;                      :branch "0.12.2"))
      ;; for tmate and over ssh cut-and-paste
      ;; https://gist.github.com/49eabc1978fe3d6dedb3ca5674a16ece.git
      ;; sakura is waiting on vte
      ;; https://bugs.launchpad.net/sakura/+bug/1769575
      ;; I'm pretty sure the lib vte issue is stale
      ;; https://bugzilla.gnome.org/show_bug.cgi?id=795774
      ;; available in minitty since 2.6.1
      ;; https://github.com/mintty/mintty/issues/258
      ;; http://mintty.github.io/ (Default tty on Cygwin etc)
      ;; I created a ticket to add support to vte
      ;; https://gitlab.gnome.org/GNOME/vte/issues/125
      ;; this would in turn enable support on many
      ;; default linux/gnome terminals
      ;; for now, you probably want to use xterm
      ;;(osc52e :location (recipe
      ;;                   :fetcher git
      ;;                   :url "https://gist.github.com/49eabc1978fe3d6dedb3ca5674a16ece.git"
      ;;                   :ensure t
      ;;                   ))
      ;; for jupyter
      ;; websocket
      ;; simple-httpd
      ;; emacs-websocket
      ;; company-mode
      ;; markdown-mode
      ;; (zmq :ensure t)
      yasnippet
      )
    "The list of Lisp packages required by the ii layer.

  Each entry is either:

  1. A symbol, which is interpreted as a package to be installed, or

  2. A list of the form (PACKAGE KEYS...), where PACKAGE is the
      name of the package to be installed or loaded, and KEYS are
      any number of keyword-value-pairs.

      The following keys are accepted:

      - :excluded (t or nil): Prevent the package from being loaded
        if value is non-nil

      - :location: Specify a custom installation location.
        The following values are legal:

        - The symbol `elpa' (default) means PACKAGE will be
          installed using the Emacs package manager.

        - The symbol `local' directs Spacemacs to load the file at
          `./local/PACKAGE/PACKAGE.el'

        - A list beginning with the symbol `recipe' is a melpa
          recipe.  See: https://github.com/milkypostman/melpa#recipe-format")


  ;;; packages.el ends here

#+end_src
*** funcs
#+begin_src elisp
  ;; Stephen's weekly time tracker
  (defun iso-week-to-time (year week day)
    (pcase-let ((`(,m ,d ,y)
                 (calendar-gregorian-from-absolute
                  (calendar-iso-to-absolute (list week day year)))))
      (encode-time 0 0 0 d m y)))

  (defun ii-timesheet ()
    "Create a timesheet buffer and insert skel"
    (interactive)
    (require 'cal-iso)
    (switch-to-buffer (get-buffer-create "*ii-timesheet*"))
    (ii-timesheet-skel)
    )

  (define-skeleton ii-timesheet-skel
    "Prompt the week and year before generating ii timesheet for the user."
    ""
    (text-mode)

    ;; > "#+TITLE: Timesheet: Week " (setq v1 (skeleton-read "Timesheet Week? "))
    > "#+TITLE: Timesheet: Week " (setq v1 (skeleton-read "Timesheet Week? "))
    ;; ", " (setq v2 (skeleton-read "Timesheet Year? "))
    ", " (setq v2 "2020")
    " (" (getenv "USER") ")" \n
    > "#+AUTHOR: " (getenv "USER") \n
    > " " \n
    > "Please refer to the instructions in ii-timesheet.org as required." \n
    > " " \n
    > "* Week Summary" \n
    > " " _ \n
    > "#+BEGIN: clocktable :scope file :block thisweek :maxlevel 2 :emphasise t :tags t :formula %" \n
    > "#+END" \n
    > " " \n

    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 1)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 2)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 3)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 4)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 5)) \n
    > "** Task X" \n
    > " " \n
    (org-mode)
    (save-buffer)
    )

  ;;; This section is for tmate / copy / paste for creating/using the right eye
  ;; ensure a process can run, discard output
  (defun runs-and-exits-zero (program &rest args)
    "Run PROGRAM with ARGS and return the exit code."
    (with-temp-buffer
      (if (= 0 (apply 'call-process program nil (current-buffer) nil args))
          'true
        ))
    )

  (defun xclip-working ()
    "Quick Check to see if X is working."
    (if (getenv "DISPLAY")
        ;; this xset test is a bit flakey
        ;; (if (runs-and-exits-zero "xset" "q")
        ;; Using xclip to set an invalid selection is as lightly intrusive
        ;; check I could come up with, and not overwriting anything
        ;; however it seems to hang
        ;; (if (runs-and-exits-zero "xclip" "-selection" "unused")
        ;;     'true)
        'true
      ;; )
      )
    )

  (defun create-target-script (filename command)
    "Create a temporary script to create/connect to target tmate window"
    (message "Creating a script file in tmp")
    (with-current-buffer (find-file-noselect filename)
      (erase-buffer)
      (insert-for-yank
       (concat "\n#!/bin/sh\n\n" command))
      (save-buffer)
      (set-file-modes filename #o755)
      )
    )

  (defun ii/populate-clipboard-with-tmate-connect-command()
    "Populate the clipboard with the correct command to connect to tmate"
    (message "Trying to populate clipboard")
    (let ((attach-command (if ;; incluster
                              (file-exists-p "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
                              ;; use kubectl
                              (concat "kubectl exec -n "
                                      (with-temp-buffer
                                        (insert-file-contents
                                         "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
                                        (buffer-string))
                                      " -ti " system-name
                                      " attach " (file-name-base load-file-name))
                            ;; out of cluster, use tmate directly
                            (concat "tmate -S " socket " attach"))
                          ))
      (gui-select-text attach-command)
      (osc52-interprogram-cut-function attach-command)
                            )
    )
  (defun populate-terminal-clipboard ()
    "Populate the osc52 clipboard via terminal with the start-tmate-sh"
    ;; TODO
    (message "Unable to set X Clipboard to contain the start-tmate-sh")
    ;; (create-target-script tmate-sh start-tmate-command)
    ;; (gui-select-text tmate-sh)
    (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
        (setq current-tmate-sh (concat "kubectl exec -ti " system-name " attach " (file-name-base load-file-name)))
      (progn
        (setq current-tmate-sh tmate-sh) ;; since tmate-sh is buffer-local..
        (if (string= (getenv "CLOUD_SHELL") "true")
            (setq current-tmate-ssh (concat "gcloud alpha cloud-shell ssh --ssh-flag=-t --command=" tmate-sh))
          (if (string= system-name "sharing.io")
              (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
              (setq current-tmate-ssh tmate-sh)
            )
          )
        )
    )
    ;;(setq current-tmate-ssh (concat "export IISOCK=" socket " ; rm -f $IISOCK ; ssh -tAX " ssh-user-host " -L $IISOCK:$IISOCK " tmate-sh))
    (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
        (setq current-tmate-ssh (concat "kubectl exec -ti " system-name " attach " (file-name-base load-file-name)))
      (if (string= (getenv "CLOUD_SHELL") "true")
          (setq current-tmate-ssh (concat "gcloud alpha cloud-shell ssh --ssh-flag=-t --command=" tmate-sh))
        (if (string= system-name "sharing.io")
            (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
          (setq current-tmate-ssh tmate-sh))
        )
      )
    (message "Trying to set via osc52")
    (osc52-interprogram-cut-function current-tmate-ssh)
    (with-current-buffer (get-buffer-create "start-tmate-sh" )
      (erase-buffer)
       (insert-for-yank "You may need to copy this manually:\n\n" )
       (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
           (insert-for-yank (concat "\nConnect to this in cluster tmate via:\n\n" current-tmate-sh))
         (insert-for-yank
          (concat "\nTo open on another host, forward your iisocket by pasting:\n\n" current-tmate-ssh
                "\n\nOR open another terminal on the same host and paste:\n\n" current-tmate-sh)
        )
       )
    )
  )
  (defun populate-x-clipboard ()
    "Populate the X clipboard with the start-tmate-sh"
    (message "Setting X Clipboard to contain the start-tmate-sh")
    (xclip-mode 1)
    ;; (gui-select-text (concat "rm -fi " socket "; ssh -tAX " ssh-user "@" ssh-host " -L " socket ":" socket " " start-tmate-over-ssh-command))
    (create-target-script tmate-sh start-tmate-command)
    ;; (gui-select-text tmate-sh)
    ;; If we work to detect if it's a remote host, this might make sense
    ;; but for now we mostly connect to the pair box
    ;; (setq current-tmate-ssh (concat "export II=" socket " ; rm -f $II ; ssh -tAX " ssh-user-host " -L $II:$II " tmate-sh))
    (setq current-tmate-sh tmate-sh) ;; since tmate-sh is buffer-local..
    (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
    (if (string= ssh-host "")
        (progn
          (gui-select-text current-tmate-sh)
          (with-current-buffer (get-buffer-create "start-tmate-sh")
            (insert-for-yank "The following has been populated to your local X clipboard:\n")
            (insert-for-yank
             ;; we can use the global current-tmate-sh
             (concat "Open another terminal on the same host and paste:\n\n" current-tmate-sh)
             ))
          )
      (progn
        (gui-select-text current-tmate-ssh)
        (with-current-buffer (get-buffer-create "start-tmate-ssh")
          (insert-for-yank "The following has been populated to your local X clipboard:\n")
          (insert-for-yank
           ;; we can use the global current-tmate-sh
           (concat "Open another terminal on the your emacs host and paste:\n\n" current-tmate-ssh)
           ))
        )
        )
                                          ; (gui-select-text start-tmate-command)
    (xclip-mode 0)
    ;; and unset it when done
    (setq current-tmate-ssh nil)
    (setq current-tmate-sh nil)
    )
  (with-eval-after-load "org"
    ;; (add-to-list 'org-src-lang-modes '("go-mode" . sql))
    (add-to-list 'org-structure-template-alist
                 `("g" . "src go")))
  ;(add-to-list 'org-structure-template-alist
  ;            `("ii"
  ;              . "src ii-mode"))

  ;; https://www.wisdomandwonder.com/article/10630/how-fast-can-you-tangle-in-org-mode
  ;; (setq help/default-gc-cons-threshold gc-cons-threshold)
  ;; (defun help/set-gc-cons-threshold (&optional multiplier notify)
  ;;   "Set `gc-cons-threshold' either to its default value or a
  ;;    `multiplier' thereof."
  ;;   (let* ((new-multiplier (or multiplier 1))
  ;;          (new-threshold (* help/default-gc-cons-threshold
  ;;                            new-multiplier)))
  ;;     (setq gc-cons-threshold new-threshold)
  ;;     (when notify (message "Setting `gc-cons-threshold' to %s"
  ;;                           new-threshold))))

  ;; (defun help/double-gc-cons-threshold () "Double `gc-cons-threshold'." (help/set-gc-cons-threshold 2))
  ;; (add-hook 'org-babel-pre-tangle-hook #'help/double-gc-cons-threshold)
  ;; (add-hook 'org-babel-post-tangle-hook #'help/set-gc-cons-threshold)

  ;; (setq-default
  ;;  time-stamp-zone "Pacific/Auckland"
  ;;  ;; https://www.emacswiki.org/emacs/TimeStamp
  ;;  time-stamp-pattern "10/#+UPDATED: needs time-local formatted regexp"
  ;;  )
  ;; https://emacs.stackexchange.com/questions/33892/replace-element-of-alist-using-equal-even-if-key-does-not-exist

  ;; This section is for setting org code block defaults that are based on the current user and file
  ;; alist-set is used to override the existing settings
  (defun alist-set (key val alist &optional symbol)
    "Set property KEY to VAL in ALIST. Return new alist.
  This creates the association if it is missing, and otherwise sets
  the cdr of the first matching association in the list. It does
  not create duplicate associations. By default, key comparison is
  done with `equal'. However, if SYMBOL is non-nil, then `eq' is
  used instead.

  This method may mutate the original alist, but you still need to
  use the return value of this method instead of the original
  alist, to ensure correct results."
    (if-let ((pair (if symbol (assq key alist) (assoc key alist))))
        (setcdr pair val)
      (push (cons key val) alist))
    alist)

  ;; Some local variable defaults that set our database connections
  ;; note the UID being dynamic, so we can have a dedicated port per person
  (defun ii/sql-org-hacks()
    (message "START: ii/sql-org-hacks")
    (set (make-local-variable 'sql-sqlite-program)
         (executable-find "sqlite3"))
    (set (make-local-variable 'sql-server)
         (if (getenv "PGHOST")
             (getenv "PGHOST")
           (if (file-exists-p "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
               "postgres"
               "localhost"
             )))
    (set (make-local-variable 'sql-port)
         (if (getenv "PGPORT")
             (string-to-number (getenv "PGPORT"))
           5432))
    (set (make-local-variable 'sql-user)
         (if (getenv "PGUSER")
             (getenv "PGUSER")
           "apisnoop"))
    (set (make-local-variable 'sql-database)
         (if (getenv "PGDATABASE")
             (getenv "PGDATABASE")
           "apisnoop"))
    (set (make-local-variable 'sql-product)
         '(quote postgres))
    (set (make-local-variable 'sql-connection-alist)
         (list
          (list 'raiinbow
                (list 'sql-product '(quote sqlite))
                (list 'sql-database "raiinbow.sqlite")
                )
          (list 'apisnoop
                (list 'sql-product '(quote postgres))
                (list 'sql-user (getenv "PGUSER"))
                (list 'sql-database (getenv "PGDATABASE"))
                (list 'sql-port sql-port)
                (list 'sql-server (getenv "PGHOST")))
          ;; (list 'apisnoop
          ;;       (list 'sql-product '(quote postgres))
          ;;       (list 'sql-user "apisnoop")
          ;;       (list 'sql-database "apisnoop")
          ;;       (list 'sql-port (+ (* (user-uid) 10) 1))
          ;;       (list 'sql-server "localhost"))
          ;; setting these allows for the connection to be
          ;; created on the fly
          (list 'none
                (list 'sql-product '(quote postgres))
                (list 'sql-user sql-user)
                (list 'sql-database sql-database)
                (list 'sql-port sql-port)
                (list 'sql-server sql-server))))
    (message "END: ii/sql-org-hacks")
    )

  ;; This sets the local-variables for tmate so that they are specific to the user
  ;; and org-file name
  (defun ii/tmate-org-hacks()
    (message "START: ii/tmate-org-hacks")
    ;; (set (make-local-variable 'ssh-user)
    ;;      user-login-name)
    ;; ;; set this in the org file or ENV
    ;; (set (make-local-variable 'ssh-host)
    ;;      (if (eq (system-name) "sharing.io")
    ;;          (concat "sharing.io")
    ;;        (concat "")
    ;;        ))
    ;; (set (make-local-variable 'ssh-user-host)
    ;;      (concat ssh-user "@" ssh-host))
    ;; (set (make-local-variable 'user-buffer)
    ;;      (concat user-login-name "." (file-name-base load-file-name)))
    ;; (set (make-local-variable 'tmate-sh)
    ;;        (if (and (getenv "TMPDIR") (file-directory-p (getenv "TMPDIR")))
    ;;            (concat (getenv "TMPDIR") user-buffer ".target.sh")
    ;;          (concat "/tmp/" user-buffer ".target.sh")
    ;;          )
    ;;        )
    ;; (set (make-local-variable 'socket)
    ;;      (if (and (getenv "TMPDIR") (file-directory-p (getenv "TMPDIR")))
    ;;          (concat (getenv "TMPDIR") user-buffer ".target.iisocket")
    ;;        (concat "/tmp/" user-buffer ".target.iisocket")
    ;;        ))
    ;; (set (make-local-variable 'socket-param)
    ;;      (concat ":sockets " socket))
    ;; (set (make-local-variable 'copy-tmate-to-ui)
    ;;      ;; TODO make this use osc52 or termux as necessary
    ;;      "; (echo \\$TMATE_CONNECT | xclip -i -sel p -f | xclip -i -sel c ) 2>/dev/null "
    ;;      )
    ;; (set (make-local-variable 'start-tmate-command)
    ;;      (concat
    ;;       "tmate -S "
    ;;       socket
    ;;       " new-session -A -s "
    ;;       user-login-name
    ;;       " -n main "
    ;;       "\"tmate wait tmate-ready "
    ;;       "&& TMATE_CONNECT=\\$("
    ;;       "tmate display -p '#{tmate_ssh} # "
    ;;       user-buffer
    ;;       ".target # "
    ;;       ;; would like this to be shorter
    ;;       (concat
    ;;        (format-time-string "%Y-%m-%d %T")
    ;;        (funcall (lambda ($x) (format "%s:%s" (substring $x 0 3) (substring $x 3 5))) (format-time-string "%z")))
    ;;       " # #{tmate_web} ') "
    ;;       "; echo \\$TMATE_CONNECT "
    ;;       copy-tmate-to-ui
    ;;       "; echo Share the above with your friends and hit enter when done. "
    ;;       ;; "; read "
    ;;       "; bash --login\""
    ;;       )
    ;;      )
    ;; at some point we can bring back working on remote hosts
    ;; (set (make-local-variable 'start-tmate-over-ssh-command)
    ;;      (concat
    ;;       "tmate -S "
    ;;       socket
    ;;       " new-session -A -s "
    ;;       user-login-name
    ;;       " -n main "
    ;;       "\"tmate wait tmate-ready "
    ;;       "\\&\\& TMATE_CONNECT=\\$\\("
    ;;       "tmate display -p '#{tmate_ssh} # "
    ;;       user-buffer
    ;;       ".target # "
    ;;       (concat
    ;;        (format-time-string "%Y-%m-%d %T")
    ;;        (funcall (lambda ($x) (format "%s:%s" (substring $x 0 3) (substring $x 3 5))) (format-time-string "%z")))
    ;;       " #{tmate_web} '\\) "
    ;;       "; echo \\$TMATE_CONNECT "
    ;;       copy-tmate-to-ui
    ;;       "; echo Share the above with your friends and hit enter when done. "
    ;;       ;; "; read "
    ;;       "; bash --login\""
    ;;       )
    ;;      )
    (message "END: ii/tmate-org-hacks")
    )

  ;; This uses alist-set to override the default code block parameters
  (defun ii/before-local-org-hacks()
    (message "BEGIN ii/before-local-org-hacks")
    (ii/tmate-org-hacks)
    (ii/sql-org-hacks)
    (make-local-variable 'org-babel-default-header-args)
    (setq org-babel-default-header-args
          (alist-set :noweb "yes"
          (alist-set :noweb-ref "(org-entry-get nil \"ITEM\")"
          (alist-set :comments "org"
          (alist-set :exports "both"
          (alist-set :eval "never-export"
          (alist-set :results "replace code"
                     org-babel-default-header-args)))))))
    (make-local-variable 'org-babel-default-header-args:tmate)
    (setq org-babel-default-header-args:tmate
          (alist-set :exports "code"
          (alist-set :session user-login-name
          (alist-set :window user-login-name
          ;; (alist-set :socket socket
                     org-babel-default-header-args:tmate)
          ;; )
          )))
    (make-local-variable 'org-babel-default-header-args:tmate)
    (setq org-babel-default-header-args:tmux
          (alist-set :exports "code"
          (alist-set :session user-login-name
          (alist-set :window user-login-name
                     ;; (alist-set :socket socket
                     org-babel-default-header-args:tmate)
                     ;; )
          ))
          )
    (make-local-variable 'org-babel-default-header-args:sql-mode)
    (setq org-babel-default-header-args:sql-mode
          (alist-set :results "replace code"
          (alist-set :product "postgres"
          (alist-set :comments "org"
          (alist-set :wrap "SRC example"
                     org-babel-default-header-args:sql-mode)))))
    ;; (make-local-variable 'org-babel-default-header-args:emacs-lisp)
    ;; (setq org-babel-default-header-args:emacs-lisp
    ;;       (alist-set :results "replace code"
    ;;                  org-babel-default-header-args:emacs-lisp))
    ;; (make-local-variable 'org-babel-default-header-args:elisp)
    ;; (setq org-babel-default-header-args:elisp
    ;;       (alist-set :results "replace code"
    ;;                  org-babel-default-header-args:elisp))
    (make-local-variable 'org-babel-default-header-args:shell)
    (setq org-babel-default-header-args:shell
          (alist-set :results "output code verbatim replace"
                     (alist-set :wrap "example"
                                org-babel-default-header-args:shell)))
    (make-local-variable 'org-babel-default-header-args:bash)
    (setq org-babel-default-header-args:bash
          (alist-set :results "output code verbatim replace"
          (alist-set :wrap "example"
                     org-babel-default-header-args:bash)))
    (make-local-variable 'org-babel-default-header-args:sh)
    (setq org-babel-default-header-args:sh
          (alist-set :results "output code verbatim replace"
          (alist-set :wrap "example"
                     org-babel-default-header-args:sh)))
    ;; (make-local-variable 'org-babel-default-header-args:json)
    ;; (setq org-babel-default-header-args:json
    ;;       (alist-set :results "output code verbatim replace"
    ;;       (alist-set :wrap "src EXAMPLE"
    ;;                  org-babel-default-header-args:json)))
    ;; (make-local-variable 'org-babel-default-header-args:yaml)
    ;; (setq org-babel-default-header-args:yaml
    ;;       (alist-set :results "output code verbatim replace"
    ;;       (alist-set :wrap "src EXAMPLE"
    ;;                  org-babel-default-header-args:yaml)))
    ;;   (message "BEGIN ii/before-local-org-hacks")
    ;;   )
    ;; ;; Setup tmate socket etc
    ;; (defun ii/after-local-var-hacks()
    ;;   (message "BEGIN: ii/after-local-var-hacks")
    ;; (message tmate-sh-sh)
    ;; For testing / setting DISPLAY to something else
    ;; (getenv "DISPLAY")
    ;; (setenv "DISPLAY" ":0")
    ;; As we start on other OSes, we'll need to copy this differently
    ;; does this org require a right eye?
    ;; local var for that
    ;; (if (xclip-working)
    ;;     (populate-x-clipboard)
    ;;   (populate-terminal-clipboard)
    ;;   )
    ;; (switch-to-buffer "start-tmate-sh")
    ;; (y-or-n-p "Have you Pasted?")
    (message "END ii/before-local-org-hacks")
    ;; (switch-to-buffer ii-org-buffer)
    )

  (defun ii/advice:org-babel-exp-src-block (obde)
    "Disable the execute advice when we export src blocks"
    (advice-remove 'org-babel-execute-src-block
                   #'ii/advice:org-babel-execute-src-block)
    (funcall obde)
    (advice-add 'org-babel-execute-src-block
                 :before #'ii/advice:org-babel-execute-src-block)
    )
  (defun ii/advice:org-babel-execute-src-block (&optional arg info params)
    "if ii-mate not set and this is a tmate src block"
    (interactive)
    ;; only run if this is a tmate block
    (if (string= "tmate" (car (org-babel-get-src-block-info t)))
        (let* (
               (org-session (alist-get :session (nth 2 (org-babel-get-src-block-info t))))
               ;; (org-session (cdr (assq :session params)))
               ;; (terminal (alist-get :terminal (nth 2 (org-babel-get-src-block-info t))))
               ;; (terminal (cdr (assq :terminal params)))
               ;; (socket (cdr (assq :socket params)))
               (socket (alist-get :socket (nth 2 (org-babel-get-src-block-info t))))
               (session-dir (cdr (assq :dir params)))
               ;; (session-x (message "terminal: %S, socket: %S, org-session: %S" terminal socket org-session))
               (session-name (ob-tmate--tmate-session org-session))
               (session-window (ob-tmate--tmate-window org-session))
               (session-socket (if socket
                                   (expand-file-name socket)
                                 (ob-tmate--tmate-socket org-session)
                         ))
               (session-y (message "session-socket: %S" session-socket))
              ;; (dir
              ;;  (file-truename
              ;;   (alist-get :dir (nth 2 (org-babel-get-src-block-info t))
              ;;              (file-name-directory buffer-file-name))))
              ;; (target-name
              ;;  (file-name-base load-file-name))
              )
          (progn
            (message "about to trying to start ii-tmate-process")
            ;; (make-local-variable 'ii-tmate-process)
            (make-local-variable 'ii-tmate-configured)
            ;; ensure a tmate server has been started
            (unless ii-tmate-process
              (progn
                (setq ii-tmate-process
                      (start-process-shell-command
                       (concat session-name "-tmate-process")
                       (concat "**" session-name "-tmate-process**")
                       (concat "tmate"
                               ;; " -F -v"
                               " -d -v"
                               " -S " session-socket
                               " new-session"
                               " -s " session-name
                               " -n " "init"; session-window
                               " -c " session-dir
                               "read X")
                       ))
                ;; (call-process-shell-command (concat "tmate -S " socket
                ;;                                     " wait tmate-ready") nil "wait ready")
                ;; (call-process-shell-command (concat "tmate -S " socket
                ;;                                     " set-hook -g client-attached"
                ;;                                     " 'run-shell "
                ;;                                     "\"tmate new-window osc52-tmate.sh\"'") nil "client-atteched")
                       ))
            ;; popup asking user to paste connection command into another terminal
            ;; (switch-to-buffer "**tmate-process**")
            ;; (unless t ; ii-tmate-configured
            ;;   (progn
            ;;     (if (string= system-type "darwin")
            ;;         (message "We used to start tmate/iterm here, now we do it elsewhere")
            ;;         ;; (iterm-new-window-send-string
            ;;         ;;  (concat
            ;;         ;;   "tmate -S " socket ; Wait for tmate to be ready
            ;;         ;;   " wait tmate-ready "
            ;;         ;;   "; tmate -S " socket ; copy ssh/url to clipboard
            ;;         ;;   " display -p '#{tmate_ssh } # #{tmate_web} | pbcopy' "
            ;;         ;;   "; tmate -S " socket ; create a new session
            ;;         ;;   " new-session " ; OR
            ;;         ;;   "|| tmate -S " socket ; attach
            ;;         ;;   " at" ; TODO get -CC working for iTerm
            ;;         ;;   ))
            ;;       (progn
            ;;         (ii/populate-clipboard-with-tmate-connect-command)
            ;;         (setq ii-org-buffer (current-buffer))
            ;;         ;; (if (xclip-working)
            ;;         ;;     (populate-x-clipboard)
            ;;         ;;   (populate-terminal-clipboard)
            ;;         ;;   )
            ;;         ;; (switch-to-buffer "start-tmate-sh")
            ;;         ;; (y-or-n-p "Have you Pasted?")
            ;;         ;; (switch-to-buffer ii-org-buffer)
            ;;         ;; (y-or-n-p "A command has been copied to your local OS. Have you pasted it into a terminal?")
            ;;         )
            ;;       )
            ;;     (setq ii-tmate-configured t)
            ;;     ))
            )
        )
      ))

  ;; This is the function intended to be run as a before-hack-local-variables-hook
  (defun ii/before-local-var-hacks()
    (message "BEGIN: ii/before-local-var-hacks")
    (if (string-equal mode-name "Org")
        (if (alist-get 'ii file-local-variables-alist)
            (ii/before-local-org-hacks)
          )
    )
    (message "END: ii/before-local-var-hacks")
    (message "ii org-mode hacks applied")
    )


#+end_src

*** config.el
    #+begin_src elisp
(setq
 auto-completion-enable-sort-by-usage t
 auto-completion-enable-help-tooltip t
 auto-completion-private-snippets-directory (expand-file-name (concat iimacs-dir "snippets"))
 auto-completion-enable-snippets-in-popup t
 dotspacemacs-enable-server t
 dotspacemacs-persistent-server t
 dotspacemacs-line-numbers '(; :visual t
                             ;; :relative nil
                             :disabled-for-modes dired-mode
                             ;; doc-view-mode
                             ;; markdown-mode
                             ;; org-mode
                             ;; pdf-view-mode
                             ;; text-mode
                             :size-limit-kb 5000)
 org-babel-python-command "python3"
 org-confirm-babel-evaluate nil
 org-enable-github-support t
 org-enable-bootstrap-support t
 org-enable-reveal-js-support t
 ;; With this enabled org-links don't work
 ;; When pasting they result in "No Buffer named *Org Links*"
 ;; org-enable-sticky-header t
 org-enable-epub-support t
 spaceline-org-clock-p t
 osc52e-package-dir (concat (configuration-layer/get-layer-local-dir 'ii) "osc52e")
 python-shell-interpreter "python3"
 ii-tmate-configured nil
 ii-tmate-process nil
 helm-mode-handle-completion-in-region nil
 ;; TODO set tmux-terminal defaults based on OS and what is installed
 org-babel-tmux-terminal "xterm"
 org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e")
 org-babel-tmux-session-prefix "ii-"
 org-babel-tmux-default-window-name "main"
 )

;; setting 'safe-local-variable properties
(put 'ii 'safe-local-variable (lambda (_) t)) ; related to ii: enabled var we put at top of org files.
(put 'org-babel-tmate-session-prefix 'safe-local-variable #'stringp)
(put 'org-babel-tmate-default-window-name 'safe-local-variable #'stringp)
(put 'github-username 'safe-local-variable #'stringp)
(put 'github-user 'safe-local-variable #'stringp)
(put 'org-confirm-babel-evaluate 'safe-local-variable #'booleanp)
;; (put 'org-confirm-babel-evaluate 'safe-local-variable (lambda (_) t))
(put 'org-use-property-inheritance 'safe-local-variable (lambda (_) t))
(put 'org-src-preserve-indentation 'safe-local-variable (lambda (_) t))
(put 'org-file-dir 'safe-local-variable (lambda (_) t))
(put 'eval 'safe-local-variable (lambda (_) t))

;; ensure go binaries are available
(setenv "PATH" (concat user-home-directory "go/bin:" (getenv "PATH")))

;; before-local-var-hacks
(add-hook 'before-hack-local-variables-hook 'ii/before-local-var-hacks)

;; ensure current line is highlighted everywhere
(global-visual-line-mode 1)

;; older versions of org require this for <s templating to work correctly
(when (version<= "9.2" (org-version)) (require 'org-tempo))

    #+end_src
*** layers
  #+begin_example elisp
 ;; List of layers we depend on
                                      auto-completion
                                      docker
                                      emacs-lisp
                                      git
                                      ;; github
                                      go
                                      graphviz
                                      html
                                      ;; ipython-notebook
                                      javascript
                                      org
                                      org-capture
                                      lsp
                                      python
                                      markdown
                                      sql
                                      version-control
                                      yaml
  #+end_example

** modified ii layer
   This is our scratch.  As we move things into their own layers, we delete from the original.  This helps us track progress a bit easier.
*** packages
#+begin_src elisp
  (defun ii/init-ob-shell ()
    (use-package ob-shell)
    ;;(require 'ob-shell)
    )
  (defun ii/init-ob-tmate ()
    (use-package ob-tmate))
  (defun ii/init-ob-powershell ()
    (use-package ob-powershell))
  (defun ii/init-ob-tmux ()
    (use-package ob-tmux))
  (defun ii/init-iterm ()
    (use-package iterm))

  (defun ii/init-osc52e ()
    )
  (defun ii/post-init-osc52e ()
    (require 'osc52e)
    (osc52-set-cut-function)
    )
  (setq ob-async-pre-execute-src-block-hook nil)
  ;; When we execute src blocks, we have some advice
  (advice-add 'org-babel-execute-src-block
              :before #'ii/advice:org-babel-execute-src-block)

  ;; Disable the execute advice when we export src blocks
  (advice-add 'org-babel-exp-src-block
              :around #'ii/advice:org-babel-exp-src-block)

  (defconst ii-packages
    `(
      (ob-powershell
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-powershell")
       )
      (iterm
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "iterm")
       )
      (ob-tmate
       :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "ob-tmate")
       )
      (ob-tmux :ensure t)
      (osc52e :ensure t
               :location ,(concat (configuration-layer/get-layer-local-dir 'ii) "osc52e")
      )
#+end_src
*** funcs
#+begin_src elisp
  ;; Stephen's weekly time tracker
  (defun iso-week-to-time (year week day)
    (pcase-let ((`(,m ,d ,y)
                 (calendar-gregorian-from-absolute
                  (calendar-iso-to-absolute (list week day year)))))
      (encode-time 0 0 0 d m y)))

  (defun ii-timesheet ()
    "Create a timesheet buffer and insert skel"
    (interactive)
    (require 'cal-iso)
    (switch-to-buffer (get-buffer-create "*ii-timesheet*"))
    (ii-timesheet-skel)
    )

  (define-skeleton ii-timesheet-skel
    "Prompt the week and year before generating ii timesheet for the user."
    ""
    (text-mode)

    ;; > "#+TITLE: Timesheet: Week " (setq v1 (skeleton-read "Timesheet Week? "))
    > "#+TITLE: Timesheet: Week " (setq v1 (skeleton-read "Timesheet Week? "))
    ;; ", " (setq v2 (skeleton-read "Timesheet Year? "))
    ", " (setq v2 "2020")
    " (" (getenv "USER") ")" \n
    > "#+AUTHOR: " (getenv "USER") \n
    > " " \n
    > "Please refer to the instructions in ii-timesheet.org as required." \n
    > " " \n
    > "* Week Summary" \n
    > " " _ \n
    > "#+BEGIN: clocktable :scope file :block thisweek :maxlevel 2 :emphasise t :tags t :formula %" \n
    > "#+END" \n
    > " " \n

    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 1)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 2)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 3)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 4)) \n
    > "** Task X" \n
    > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 5)) \n
    > "** Task X" \n
    > " " \n
    (org-mode)
    (save-buffer)
    )

  ;;; This section is for tmate / copy / paste for creating/using the right eye
  ;; ensure a process can run, discard output
  (defun runs-and-exits-zero (program &rest args)
    "Run PROGRAM with ARGS and return the exit code."
    (with-temp-buffer
      (if (= 0 (apply 'call-process program nil (current-buffer) nil args))
          'true
        ))
    )

  (defun xclip-working ()
    "Quick Check to see if X is working."
    (if (getenv "DISPLAY")
        ;; this xset test is a bit flakey
        ;; (if (runs-and-exits-zero "xset" "q")
        ;; Using xclip to set an invalid selection is as lightly intrusive
        ;; check I could come up with, and not overwriting anything
        ;; however it seems to hang
        ;; (if (runs-and-exits-zero "xclip" "-selection" "unused")
        ;;     'true)
        'true
      ;; )
      )
    )

  (defun create-target-script (filename command)
    "Create a temporary script to create/connect to target tmate window"
    (message "Creating a script file in tmp")
    (with-current-buffer (find-file-noselect filename)
      (erase-buffer)
      (insert-for-yank
       (concat "\n#!/bin/sh\n\n" command))
      (save-buffer)
      (set-file-modes filename #o755)
      )
    )

  (defun ii/populate-clipboard-with-tmate-connect-command()
    "Populate the clipboard with the correct command to connect to tmate"
    (message "Trying to populate clipboard")
    (let ((attach-command (if ;; incluster
                              (file-exists-p "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
                              ;; use kubectl
                              (concat "kubectl exec -n "
                                      (with-temp-buffer
                                        (insert-file-contents
                                         "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
                                        (buffer-string))
                                      " -ti " system-name
                                      " attach " (file-name-base load-file-name))
                            ;; out of cluster, use tmate directly
                            (concat "tmate -S " socket " attach"))
                          ))
      (gui-select-text attach-command)
      (osc52-interprogram-cut-function attach-command)
                            )
    )
  (defun populate-terminal-clipboard ()
    "Populate the osc52 clipboard via terminal with the start-tmate-sh"
    ;; TODO
    (message "Unable to set X Clipboard to contain the start-tmate-sh")
    ;; (create-target-script tmate-sh start-tmate-command)
    ;; (gui-select-text tmate-sh)
    (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
        (setq current-tmate-sh (concat "kubectl exec -ti " system-name " attach " (file-name-base load-file-name)))
      (progn
        (setq current-tmate-sh tmate-sh) ;; since tmate-sh is buffer-local..
        (if (string= (getenv "CLOUD_SHELL") "true")
            (setq current-tmate-ssh (concat "gcloud alpha cloud-shell ssh --ssh-flag=-t --command=" tmate-sh))
          (if (string= system-name "sharing.io")
              (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
              (setq current-tmate-ssh tmate-sh)
            )
          )
        )
    )
    (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
        (setq current-tmate-ssh (concat "kubectl exec -ti " system-name " attach " (file-name-base load-file-name)))
      (if (string= (getenv "CLOUD_SHELL") "true")
          (setq current-tmate-ssh (concat "gcloud alpha cloud-shell ssh --ssh-flag=-t --command=" tmate-sh))
        (if (string= system-name "sharing.io")
            (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
          (setq current-tmate-ssh tmate-sh))
        )
      )
    (message "Trying to set via osc52")
    (osc52-interprogram-cut-function current-tmate-ssh)
    (with-current-buffer (get-buffer-create "start-tmate-sh" )
      (erase-buffer)
       (insert-for-yank "You may need to copy this manually:\n\n" )
       (if (string= (getenv "KUBERNETES_PORT_443_TCP_PROTO") "tcp")
           (insert-for-yank (concat "\nConnect to this in cluster tmate via:\n\n" current-tmate-sh))
         (insert-for-yank
          (concat "\nTo open on another host, forward your iisocket by pasting:\n\n" current-tmate-ssh
                "\n\nOR open another terminal on the same host and paste:\n\n" current-tmate-sh)
        )
       )
    )
  )
  (defun populate-x-clipboard ()
    "Populate the X clipboard with the start-tmate-sh"
    (message "Setting X Clipboard to contain the start-tmate-sh")
    (xclip-mode 1)
    (create-target-script tmate-sh start-tmate-command)
    (setq current-tmate-sh tmate-sh) ;; since tmate-sh is buffer-local..
    (setq current-tmate-ssh (concat "ssh -tAX " ssh-user-host " " tmate-sh))
    (if (string= ssh-host "")
        (progn
          (gui-select-text current-tmate-sh)
          (with-current-buffer (get-buffer-create "start-tmate-sh")
            (insert-for-yank "The following has been populated to your local X clipboard:\n")
            (insert-for-yank
             ;; we can use the global current-tmate-sh
             (concat "Open another terminal on the same host and paste:\n\n" current-tmate-sh)
             ))
          )
      (progn
        (gui-select-text current-tmate-ssh)
        (with-current-buffer (get-buffer-create "start-tmate-ssh")
          (insert-for-yank "The following has been populated to your local X clipboard:\n")
          (insert-for-yank
           ;; we can use the global current-tmate-sh
           (concat "Open another terminal on the your emacs host and paste:\n\n" current-tmate-ssh)
           ))
        )
        )
    (xclip-mode 0)
    ;; and unset it when done
    (setq current-tmate-ssh nil)
    (setq current-tmate-sh nil))

   (defun ssh-find-agent ()
    (interactive)
    (setenv "SSH_AUTH_SOCK" (shell-command-to-string "find /tmp /run/host/tmp/ -type s -regex '.*/ssh-.*/agent..*$' 2> /dev/null | tail -n 1 | tr -d '\n'"))
    (message (getenv "SSH_AUTH_SOCK"))
    )
  (with-eval-after-load "org"
    ;; (add-to-list 'org-src-lang-modes '("go-mode" . sql))
    (add-to-list 'org-structure-template-alist
                 `("g" . "src go")))

  ;; This section is for setting org code block defaults that are based on the current user and file
  ;; alist-set is used to override the existing settings
  (defun alist-set (key val alist &optional symbol)
    "Set property KEY to VAL in ALIST. Return new alist.
  This creates the association if it is missing, and otherwise sets
  the cdr of the first matching association in the list. It does
  not create duplicate associations. By default, key comparison is
  done with `equal'. However, if SYMBOL is non-nil, then `eq' is
  used instead.

  This method may mutate the original alist, but you still need to
  use the return value of this method instead of the original
  alist, to ensure correct results."
    (if-let ((pair (if symbol (assq key alist) (assoc key alist))))
        (setcdr pair val)
      (push (cons key val) alist))
    alist)

  ;; Some local variable defaults that set our database connections
  ;; note the UID being dynamic, so we can have a dedicated port per person
  (defun ii/sql-org-hacks()
    (message "START: ii/sql-org-hacks")
    (set (make-local-variable 'sql-sqlite-program)
         (executable-find "sqlite3"))
    (set (make-local-variable 'sql-server)
         (if (getenv "PGHOST")
             (getenv "PGHOST")
           (if (file-exists-p "/var/run/secrets/kubernetes.io/serviceaccount/namespace")
               "postgres"
               "localhost"
             )))
    (set (make-local-variable 'sql-port)
         (if (getenv "PGPORT")
             (string-to-number (getenv "PGPORT"))
           5432))
    (set (make-local-variable 'sql-user)
         (if (getenv "PGUSER")
             (getenv "PGUSER")
           "apisnoop"))
    (set (make-local-variable 'sql-database)
         (if (getenv "PGDATABASE")
             (getenv "PGDATABASE")
           "apisnoop"))
    (set (make-local-variable 'sql-product)
         '(quote postgres))
    (set (make-local-variable 'sql-connection-alist)
         (list
          (list 'raiinbow
                (list 'sql-product '(quote sqlite))
                (list 'sql-database "raiinbow.sqlite")
                )
          (list 'apisnoop
                (list 'sql-product '(quote postgres))
                (list 'sql-user (getenv "PGUSER"))
                (list 'sql-database (getenv "PGDATABASE"))
                (list 'sql-port sql-port)
                (list 'sql-server (getenv "PGHOST")))
          (list 'none
                (list 'sql-product '(quote postgres))
                (list 'sql-user sql-user)
                (list 'sql-database sql-database)
                (list 'sql-port sql-port)
                (list 'sql-server sql-server))))
    (message "END: ii/sql-org-hacks"))

  ;; This uses alist-set to override the default code block parameters
  (defun ii/before-local-org-hacks()
    (message "BEGIN ii/before-local-org-hacks")
    (ii/sql-org-hacks)
    (make-local-variable 'org-babel-default-header-args:tmate)
    (setq org-babel-default-header-args:tmate
          (alist-set :exports "code"
          (alist-set :session user-login-name
          (alist-set :window user-login-name
          ;; alist-set :socket socket
                     org-babel-default-header-args:tmate))))
    (make-local-variable 'org-babel-default-header-args:tmate)
    (setq org-babel-default-header-args:tmux
          (alist-set :exports "code"
          (alist-set :session user-login-name
          (alist-set :window user-login-name
                     org-babel-default-header-args:tmate))))
    (message "END ii/before-local-org-hacks"))

  (defun ii/advice:org-babel-exp-src-block (obde)
    "Disable the execute advice when we export src blocks"
    (advice-remove 'org-babel-execute-src-block
                   #'ii/advice:org-babel-execute-src-block)
    (funcall obde)
    (advice-add 'org-babel-execute-src-block
                 :before #'ii/advice:org-babel-execute-src-block)
    )
  (defun ii/advice:org-babel-execute-src-block (&optional arg info params)
    "if ii-mate not set and this is a tmate src block"
    (interactive)
    ;; only run if this is a tmate block
    (if (string= "tmate" (car (org-babel-get-src-block-info t)))
        (let* (
               (org-session (alist-get :session (nth 2 (org-babel-get-src-block-info t))))
               (socket (alist-get :socket (nth 2 (org-babel-get-src-block-info t))))
               (session-dir (cdr (assq :dir params)))
               ;; (session-x (message "terminal: %S, socket: %S, org-session: %S" terminal socket org-session))
               (session-name (ob-tmate--tmate-session org-session))
               (session-window (ob-tmate--tmate-window org-session))
               (session-socket (if socket
                                   (expand-file-name socket)
                                 (ob-tmate--tmate-socket org-session)
                         ))
               (session-y (message "session-socket: %S" session-socket)))
          (progn
            (message "about to trying to start ii-tmate-process")
            ;; (make-local-variable 'ii-tmate-process)
            (make-local-variable 'ii-tmate-configured)
            ;; ensure a tmate server has been started
            (unless ii-tmate-process
              (progn
                (setq ii-tmate-process
                      (start-process-shell-command
                       (concat session-name "-tmate-process")
                       (concat "**" session-name "-tmate-process**")
                       (concat "tmate"
                               ;; " -F -v"
                               " -d -v"
                               " -S " session-socket
                               " new-session"
                               " -s " session-name
                               " -n " "init"; session-window
                               " -c " session-dir
                               "read X")
                       ))))))))

  ;; This is the function intended to be run as a before-hack-local-variables-hook
  (defun ii/before-local-var-hacks()
    (message "BEGIN: ii/before-local-var-hacks")
    (if (string-equal mode-name "Org")
        (if (alist-get 'ii file-local-variables-alist)
            (ii/before-local-org-hacks)))
    (message "END: ii/before-local-var-hacks")
    (message "ii org-mode hacks applied"))


#+end_src

*** config.el
    #+begin_src elisp
(setq
 osc52e-package-dir (concat (configuration-layer/get-layer-local-dir 'ii) "osc52e")
 ii-tmate-configured nil
 ii-tmate-process nil
 org-babel-tmux-terminal "xterm"
 org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e")
 org-babel-tmux-session-prefix "ii-"
 org-babel-tmux-default-window-name "main"
 )

;; setting 'safe-local-variable properties
(put 'ii 'safe-local-variable (lambda (_) t)) ; related to ii: enabled var we put at top of org files.
(put 'org-babel-tmate-session-prefix 'safe-local-variable #'stringp)
(put 'org-babel-tmate-default-window-name 'safe-local-variable #'stringp)
(put 'github-username 'safe-local-variable #'stringp)
(put 'github-user 'safe-local-variable #'stringp)
(put 'org-confirm-babel-evaluate 'safe-local-variable #'booleanp)
;; (put 'org-confirm-babel-evaluate 'safe-local-variable (lambda (_) t))
(put 'org-use-property-inheritance 'safe-local-variable (lambda (_) t))
(put 'org-src-preserve-indentation 'safe-local-variable (lambda (_) t))
(put 'org-file-dir 'safe-local-variable (lambda (_) t))
(put 'eval 'safe-local-variable (lambda (_) t))

;; before-local-var-hacks
(add-hook 'before-hack-local-variables-hook 'ii/before-local-var-hacks)

;; older versions of org require this for <s templating to work correctly
(when (version<= "9.2" (org-version)) (require 'org-tempo))

    #+end_src
** Packaging basics
   https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html
* Future needs
** ensure importmagic and epc are installed in our syme packages
   https://stackoverflow.com/questions/49065606/how-to-fix-spacemacs-importmagic-and-or-epc-not-found
   otherwise we get an error about importmagic not being fou8nd and a pakcage unable to be installed.
   the trip is to install the prolgrams in the python environment we are using
   which means we need to ensure our pairing boxes have python3 and importmagic and epc
   **
** get org-checklist working cleanlyA or remake it
   this just adds the ability to do recurring tasks (clear out a whole checklist when its marked as done)
   I tried to add it as a package, and it could not be found.  When i look it up, the github link is also  a 404.
   This is one where the package is likely v. small or already included.  I think we should tackle it when someone has a recurring task ansd theircurrent flow isn't workiung for them.


* Footnotes
# Local Variables:
# End:
